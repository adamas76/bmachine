// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using BehaviourMachine;
using UnityEngine;
using ws.winx.unity;

namespace ws.winx.bmachine.extensions
{
	[NodeInfo ( category = "Extensions/Eventor/Mecanim/", icon = "StateMachine",  description ="To be used in conjuction with MecanimNode for sending events in animation points in time")]
		public class SendEventNormalizedEventor:ActionNode
		{
				//
				// Fields
				//

				Animator _animator;
				float _timeNormalizedLast;
				[VariableInfo (requiredField = true,tooltip = "The event to send")]
				public FsmEvent
						eventToSend;
				[VariableInfo (requiredField = true,fixedType=true, tooltip = "Normalized time value from 0 to 1."), Range (0f, 1f)]
				public FloatVar
						timeNormalized;
			
				public override void Awake ()
				{
				
						_animator = this.self.GetComponent<Animator> ();
					
				}



				///!!!!Nasty hack :)

				void onCustomNodeTick (ActionNode node)
				{
						if (node != this.branch)
								return;
						//Debug.Log ("onTick "+node.name);

						OnTick ();
				}


					public override void Start ()
					{
						ActionNode.onNodeTick += onCustomNodeTick;
					}


				public override void Update ()
				{
						MecanimStateInfo selectedAnimaStateInfo = ((MecanimNode)this.branch).selectedAnimaStateInfo;
						AnimatorStateInfo currentAnimatorStateInfo = _animator.GetCurrentAnimatorStateInfo (selectedAnimaStateInfo.layer);

						//Debug.Log ("onUpdate");
					
						if (currentAnimatorStateInfo.nameHash == selectedAnimaStateInfo.hash) {
								float timeNormalizedCurrent = currentAnimatorStateInfo.normalizedTime;

						
								timeNormalizedCurrent = timeNormalizedCurrent - (int)timeNormalizedCurrent;


								//Debug.Log ("timeNormalizedCurrent "+timeNormalizedCurrent);

								if (timeNormalizedCurrent > timeNormalized && _timeNormalizedLast < timeNormalized) {

										base.owner.SendEvent (this.eventToSend.id);
										Debug.Log ("Event [" + name + "] sent at:" + timeNormalized.Value);
										this.status = Status.Success;
										_timeNormalizedLast = timeNormalizedCurrent;
										return;
								}

								_timeNormalizedLast = timeNormalizedCurrent;
						}

						this.status = Status.Running;

				}
			
				public override void Reset ()
				{
						this.eventToSend = new FsmEvent ();
						this.timeNormalized = new ConcreteFloatVar ();
						_timeNormalizedLast = 0f;
				
				}

				public override void End ()
				{
						Debug.Log ("End " + this.name);
						ActionNode.onNodeTick -= onCustomNodeTick;
				}

				public override void OnDisable ()
				{

					//clean
					ActionNode.onNodeTick -= onCustomNodeTick;

					base.OnDisable ();
				}

				public override string ToString ()
				{
						return string.Format ("[SendEventNormalizedEventor]{0} {1}", name, timeNormalized.Value);
				}
		}
}

