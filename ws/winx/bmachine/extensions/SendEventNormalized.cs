// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using BehaviourMachine;
using UnityEngine;
using ws.winx.unity;
using UnityEngine.Events;
using ws.winx.unity.attributes;

namespace ws.winx.bmachine.extensions
{
		[NodeInfo ( category = "Extensions/Mecanim/", icon = "StateMachine",  description ="To be used in conjuction with MecanimNode for sending events in animation points in time")]
		public class SendEventNormalized:ActionNode
		{
				//
				// Fields
				//

				Animator _animator;
				float _timeNormalizedLast;
				[UnityVariablePropertyAttribute(typeof(float))]
				public UnityVariable
						timeNormalized;

//				[UnityVariablePropertyAttribute(typeof(UnityEvent))]
//				public UnityVariable
//					unityEvent;


			
				public override void Awake ()
				{
				
						_animator = this.self.GetComponent<Animator> ();
						
				}

				public override Status Update ()
				{
						MecanimStateInfo selectedAnimaStateInfo = ((MecanimNode)this.branch).animaStateInfoSelected;
						AnimatorStateInfo currentAnimatorStateInfo = _animator.GetCurrentAnimatorStateInfo (selectedAnimaStateInfo.layer);

						//Debug.Log ("onUpdate");
					
						if (currentAnimatorStateInfo.shortNameHash == selectedAnimaStateInfo.hash) {
								float timeNormalizedCurrent = currentAnimatorStateInfo.normalizedTime;

						
								timeNormalizedCurrent = timeNormalizedCurrent - (int)timeNormalizedCurrent;


								//Debug.Log ("timeNormalizedCurrent "+timeNormalizedCurrent);

								if (timeNormalizedCurrent > (float)timeNormalized.Value && _timeNormalizedLast < (float)timeNormalized.Value) {

										//Debug.Log ("Event [" + name + "] sent at:" + timeNormalized.Value);
										//onAnimationEvent.Invoke ();
										_timeNormalizedLast = timeNormalizedCurrent;
										return Status.Success;
								}

								_timeNormalizedLast = timeNormalizedCurrent;
						}

						//this.status = Status.Running;
						
						return Status.Running;
				}
			
				public override void Reset ()
				{
						//this.onAnimationEvent = new UnityEvent ();
						this.timeNormalized = (UnityVariable)ScriptableObject.CreateInstance< UnityVariable> ();
						this.timeNormalized.Value = 0f;

						_timeNormalizedLast = 0f;
				
				}

				public override string ToString ()
				{
						return string.Format ("[SendEventNormalized]{0} {1}", name, timeNormalized.Value);
				}
		}
}

