// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Reflection;
using System.Collections.Generic;


namespace ws.winx.utility
{
	public class RefToValue<T>
	{
		private Func<T> getter;
		private Action<T> setter;
		public RefToValue(Func<T> getter, Action<T> setter)
		{
			this.getter = getter;
			this.setter = setter;
		}
		public T Value
		{
			get { return getter(); }
			set { setter(value); }
		}
	}


	public static class ReflectionExtension{
		public static void SetValue(this MemberInfo member, object property, object value)
		{
			if (member.MemberType == MemberTypes.Property)
				((PropertyInfo)member).SetValue(property, value, null);
			else if (member.MemberType == MemberTypes.Field)
				((FieldInfo)member).SetValue(property, value);
			else
				throw new Exception("Property must be of type FieldInfo or PropertyInfo");
		}
		
		public static object GetValue(this MemberInfo member, object property)
		{
			if (member.MemberType == MemberTypes.Property)
				return ((PropertyInfo)member).GetValue(property, null);
			else if (member.MemberType == MemberTypes.Field)
				return ((FieldInfo)member).GetValue(property);
			else
				throw new Exception("Property must be of type FieldInfo or PropertyInfo");
		}
		
//		public static Type GetType(this MemberInfo member)
//		{
//			switch (member.MemberType)
//			{
//			case MemberTypes.Field:
//				return ((FieldInfo)member).FieldType;
//			case MemberTypes.Property:
//				return ((PropertyInfo)member).PropertyType;
//			case MemberTypes.Event:
//				return ((EventInfo)member).EventHandlerType;
//			case MemberTypes.Method:
//				return ((MethodInfo)member).ReturnType;
//			default:
//				throw new ArgumentException("MemberInfo must be if type FieldInfo, PropertyInfo or EventInfo", "member");
//			}
//		}
	}





}

