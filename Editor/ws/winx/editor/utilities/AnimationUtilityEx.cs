// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;
using System.Linq;


namespace ws.winx.editor.utilities
{
	public static class AnimationUtilityEx
	{
		public static void RemovePositionAt (AnimationClip clip,int keyframeInx)
		{
			Type T = typeof(Transform);	
			AnimationUtility.GetEditorCurve (clip, EditorCurveBinding.FloatCurve ("", T, "m_LocalPosition.x")).RemoveKey (keyframeInx);
			AnimationUtility.GetEditorCurve (clip, EditorCurveBinding.FloatCurve ("", T, "m_LocalPosition.y")).RemoveKey (keyframeInx);
			AnimationUtility.GetEditorCurve (clip, EditorCurveBinding.FloatCurve ("", T, "m_LocalPosition.z")).RemoveKey (keyframeInx);
		}


		public static float GetTimeAt(AnimationClip clip,int keyFrameInx){

			return AnimationUtility.GetEditorCurve (clip, EditorCurveBinding.FloatCurve ("", typeof(Transform), "m_LocalPosition.x")).keys[keyFrameInx].time;


		}



		/// <summary>
		/// Gets the positions x,y,z by keyframes transformed from local to world space
		/// </summary>
		/// <returns>The positions.</returns>
		/// <param name="clip">Clip.</param>
		/// <param name="transform">Transform.</param>
		public static Vector3[] GetPositions(AnimationClip clip,Transform transform=null)
		{

			Type T = typeof(Transform);	
			AnimationCurve curvePosX=AnimationUtility.GetEditorCurve (clip, EditorCurveBinding.FloatCurve ("", T, "m_LocalPosition.x"));
			AnimationCurve curvePosY=AnimationUtility.GetEditorCurve (clip, EditorCurveBinding.FloatCurve ("", T, "m_LocalPosition.y"));
			AnimationCurve curvePosZ = AnimationUtility.GetEditorCurve (clip, EditorCurveBinding.FloatCurve ("", T,"m_LocalPosition.z"));
						

						Vector3[] positionVectors =null;

						if (curvePosX!=null) {

								int keysNumber=curvePosX.length;


								positionVectors = new Vector3[keysNumber];
									
								
								for(int keyCurrent=0;keyCurrent<keysNumber; keyCurrent++){

									if(transform!=null)//conver local transform to world
										positionVectors[keyCurrent]=transform.TransformPoint(new Vector3(curvePosX.keys[keyCurrent].value,curvePosY.keys[keyCurrent].value,curvePosZ.keys[keyCurrent].value));
									else
										positionVectors[keyCurrent]=new Vector3(curvePosX.keys[keyCurrent].value,curvePosY.keys[keyCurrent].value,curvePosZ.keys[keyCurrent].value);
								}
								

						}


					


			return positionVectors;
		}

	}
}

