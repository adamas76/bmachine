// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using BehaviourMachine;
using BehaviourMachineEditor;
using UnityEditor;
using UnityEngine;
using ws.winx.bmachine.extensions;

namespace ws.winx.editor.bmachine.extensions
{
		
		public class NodePopupEditor<T>:EditorWindow where T:ActionNode
		{
				private static NodePopupEditor<T> window;
				private static T node;
				NodeEditor editor;

				

				public static void Show(T node, Rect position)
				{
						NodePopupEditor<T>.node = node;

						if (window != null)//restore last 
								position = window.position;


			//need fix
			NodePopupEditor<T>.window =(NodePopupEditor<T>) EditorWindow.CreateInstance (typeof (NodePopupEditor<T>));
					//(NodePopupEditor<T>) EditorWindow.GetWindow(typeof(NodePopupEditor<T>));
						NodePopupEditor<T>.window.position = position;
						NodePopupEditor<T>.window.ShowPopup ();
				}

				public static void Hide ()
				{
						if (window != null)
								window.Close ();
				}

				

				void OnGUI ()
				{
						// The actual window code goes here
						if (NodePopupEditor<T>.node != null) {
								if (editor == null)
					editor = NodeEditor.CreateEditor(NodePopupEditor<T>.node.GetType());
								if (editor.target != NodePopupEditor<T>.node)//How to add target to editor??? or subclass the Node Editor
										editor.DrawNode (NodePopupEditor<T>.node);
								else
										editor.OnInspectorGUI ();
						}
				
				}

		}
}

