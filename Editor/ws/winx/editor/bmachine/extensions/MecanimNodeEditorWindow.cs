// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using BehaviourMachine;
using BehaviourMachineEditor;
using UnityEditor;
using UnityEngine;
using ws.winx.bmachine.extensions;
using ws.winx.unity;
using UnityEditorInternal;

namespace ws.winx.editor.bmachine.extensions
{
		public class MecanimNodeEditorWindow:EditorWindow
		{
				private static MecanimNodeEditorWindow window;
				private static MecanimNode __mecanimNode;
				private static ReorderableList __gameObjectList;





				private static AvatarPreviewW avatarPreview;
				private static  SerializedNodeProperty curvesSerialized;
				private static	SerializedNodeProperty curvesColorsSerialized;
				private static	SerializedNodeProperty variablesBindedToCurvesSerialized;
				private static	SerializedNodeProperty animatorStateSerialized;
				private static	SerializedNodeProperty animatorStateRuntimeControlEnabledSerialized;
				private static	SerializedNodeProperty animatorStateRunTimeControlSerialized;
				private static	SerializedNodeProperty motionOverrideSerialized;
				private static float timeNormalizedStartPrev = -1f;
				private static float timeNormalizedEndPrev = 1.1f;

				private static float timeNormalized;

				NodeEditor editor;

				public static void Show (MecanimNode target,SerializedNode node, Rect? position)
				{
						MecanimNodeEditorWindow.__mecanimNode = target;
						

						///////   ACCESS SERIALIZED DATA /////////
						NodePropertyIterator iterator = node.GetIterator ();




						if (iterator.Find ("animatorStateSelected"))
								animatorStateSerialized = iterator.current;
			
			
						if (iterator.Find ("motionOverride"))
								motionOverrideSerialized = iterator.current;




						//MecanimNodeEditorWindow.__gameObjectList= new ReorderableList(



						if (MecanimNodeEditorWindow.window != null)//restore last 
								position = window.position;

		
						MecanimNodeEditorWindow.window = (MecanimNodeEditorWindow)EditorWindow.GetWindow (typeof(MecanimNodeEditorWindow));


						 
						if (position.HasValue)
								MecanimNodeEditorWindow.window.position = position.Value;
						MecanimNodeEditorWindow.window.Show ();
				}

				public static void Hide ()
				{
						if (window != null)
								window.Close ();
				}

				void OnGUI ()
				{


						


						/////////// AVATAR Preview GUI ////////////

			
			
						if (!Application.isPlaying && __mecanimNode!=null && animatorStateSerialized.value != null) {
				
								//////////  MOTION OVERRIDE HANDLING  //////////

								UnityEngine.Motion motion = null;
					
								UnityVariable motionOverridVariable = (UnityVariable)motionOverrideSerialized.value;
					
								//if there are no override use motion of selected AnimationState
								//Debug.Log(((UnityEngine.Object)mecanimNode.motionOverride.Value).);
								if (motionOverridVariable == null || motionOverridVariable.Value == null || motionOverridVariable.ValueType != typeof(AnimationClip))
										motion = ((ws.winx.unity.AnimatorState)animatorStateSerialized.value).motion;
								else //
										motion = (UnityEngine.Motion)motionOverridVariable.Value;
					
					
					
								if (motionOverridVariable != null && motionOverridVariable.Value != null && ((ws.winx.unity.AnimatorState)animatorStateSerialized.value).motion == null) {
										Debug.LogError ("Can't override state that doesn't contain motion");
								}
					
					



				
				
								//This makes layout to work (Reserving space)
								Rect avatarRect = GUILayoutUtility.GetRect (Screen.width - 16f, 200);
								avatarRect.width -= 70f;
								avatarRect.xMin += 6f;
				
				
								if (avatarPreview == null)
										avatarPreview = new AvatarPreviewW (null, motion);
								else
										avatarPreview.SetPreviewMotion (motion);
				
				
				
								EditorGUILayout.BeginHorizontal ();
				
				
				
								if (Event.current.type == EventType.Repaint) {
					

						
						
										//!!! changing 
										//avatarPreview.timeControl.startTime
										// start/stop makes AvatarPreview to play from start to stop
										// but its not offer good usability of resized animation
						
						
										if (avatarPreview.timeControl.playing) {
							
												//restrict animation into this range
												if (avatarPreview.timeControl.normalizedTime < __mecanimNode.range.rangeStart || avatarPreview.timeControl.normalizedTime > __mecanimNode.range.rangeEnd) {
								
								
								
														avatarPreview.timeControl.nextCurrentTime = avatarPreview.timeControl.startTime * (1f - __mecanimNode.range.rangeStart) + avatarPreview.timeControl.stopTime * __mecanimNode.range.rangeStart;	
								
												}
										} else {
							
												//set AvatarPreview animation time range depending of drag of range control handles
												if (Math.Abs (__mecanimNode.range.rangeStart - timeNormalizedStartPrev) > 0.01f) {
														timeNormalizedStartPrev = __mecanimNode.range.rangeStart;
								
														avatarPreview.SetTimeAt (timeNormalizedStartPrev);
								
												} else
												if (Math.Abs (__mecanimNode.range.rangeEnd - timeNormalizedEndPrev) > 0.01f) {
														timeNormalizedEndPrev = __mecanimNode.range.rangeEnd;
														avatarPreview.SetTimeAt (timeNormalizedEndPrev);
								
												}
							
							
										}
						
						
						
						
						
						
								}



								avatarPreview.timeControl.playbackSpeed = __mecanimNode.speed;
						
						
						
						
						
								avatarPreview.DoAvatarPreview (avatarRect, GUIStyle.none);
						
						
								//timeNormalized = avatarPreview.timeControl.normalizedTime;
						
								
								EditorGUILayout.EndHorizontal ();		

					
					
					
						}				
				
				
				
				
				

						
//						// The actual window code goes here
//						if (MecanimNodeEditorWindow.node != null) {
//								if (editor == null)
//										editor = NodeEditor.CreateEditor (MecanimNodeEditorWindow.node.GetType ());
//								if (editor.target != MecanimNodeEditorWindow.node)//How to add target to editor??? or subclass the Node Editor
//										editor.DrawNode (MecanimNodeEditorWindow.node);
//								else
//										editor.OnInspectorGUI ();
//						}
				
				}

		}
}

