// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEditor;
using UnityEngine;
using UnityEditor.Graphs;
using System.Collections.Generic;

namespace ws.winx.editor.components
{

	public class GraphEditorWindow : EditorWindow
	{ 
		static GraphEditorWindow graphEditorWindow;
		Graph stateMachineGraph;

		GraphGUIEx stateMachineGraphGUI;
		
		[MenuItem("Window/Example")]
		static void Do ()
		{
			graphEditorWindow = GetWindow<GraphEditorWindow> ();
		}
		
		void OnEnable ()
		{
			Slot start=null;

			if (stateMachineGraph == null) {
				stateMachineGraph = ScriptableObject.CreateInstance<Graph> ();
				stateMachineGraph.hideFlags = HideFlags.HideAndDontSave;


				Node node=ScriptableObject.CreateInstance<Node>();
				node.title="mile2";
				node.position=new Rect(400,34,300,200);
				//node.style

				node.AddInputSlot("input");
				start=node.AddOutputSlot("output");
				node.AddProperty(new Property(typeof(System.Int32),"integer"));
				stateMachineGraph.AddNode(node);
			}
			if (stateMachineGraphGUI == null) {

				Node node=ScriptableObject.CreateInstance<Node>();
				node.title="mile";
				node.position=new Rect(0,0,300,200);
				//node.style=Styles.

				Slot end=node.AddInputSlot("input");
				node.AddOutputSlot("output");
				node.AddProperty(new Property(typeof(System.Int32),"integer"));
				stateMachineGraph.AddNode(node);
				stateMachineGraph.Connect(start,end);
				stateMachineGraphGUI = (GetEditor (stateMachineGraph));
			}
		}
		
		void OnDisable ()
		{
			graphEditorWindow = null;
		}
		
		void OnGUI ()
		{
			if (graphEditorWindow && stateMachineGraphGUI != null) {
				stateMachineGraphGUI.BeginGraphGUI (graphEditorWindow, new Rect (0, 0, graphEditorWindow.position.width, graphEditorWindow.position.height));
				           stateMachineGraphGUI.OnGraphGUI ();
//				Node node;
//				for(int i=0;i<stateMachineGraph.nodes.Count;i++)
//				{
//					node=stateMachineGraph.nodes[i];
//
//					stateMachineGraphGUI.NodeGUI(node);
//
//					GUILayoutUtility.GetRect (160f, 0f);
//
//					//stateMachineGraphGUI.SelectNode(node);
//					//stateMachineGraphGUI.DragNodes ();
//					//node.NodeUI(stateMachineGraphGUI);
//				}

				//OnGraphGUI();
	
				stateMachineGraphGUI.EndGraphGUI ();
				
			}
		}




		public  void OnGraphGUI ()
		{
			this.BeginWindows ();
			using (List<Node>.Enumerator enumerator = stateMachineGraph.nodes.GetEnumerator ())
			{
				while (enumerator.MoveNext ())
				{
					Node current = enumerator.Current;
					Node n2 = current;
					bool on = false;//this.selection.Contains (current);
					Styles.Color color = (!current.nodeIsInvalid) ? current.color : Styles.Color.Red;
					current.position = GUILayout.Window (current.GetInstanceID (), current.position, delegate
					                                     {
						stateMachineGraphGUI.NodeGUI (n2);
					}, current.title, Styles.GetNodeStyle (current.style, color, on), new GUILayoutOption[]
					{
						GUILayout.Width (0f),
						GUILayout.Height (0f)
					});
				}
			}
			this.EndWindows ();
		  
			(stateMachineGraphGUI.edgeGUI as UnityEditor.Graphs.EdgeGUI)
				.DoEdges ();
//			stateMachineGraphGUI.edgeGUI.DoDraggedEdge ();
//			stateMachineGraphGUI.DragSelection (new Rect (-5000f, -5000f, 10000f, 10000f));
//			stateMachineGraphGUI.ShowContextMenu ();
//			stateMachineGraphGUI.HandleMenuEvents ();
		}
		
		GraphGUIEx GetEditor (Graph graph)
		{
			GraphGUIEx graphGUI = ScriptableObject.CreateInstance<GraphGUIEx>();
			graphGUI.graph = graph;
			graphGUI.hideFlags = HideFlags.HideAndDontSave;
			return graphGUI;
		}
	}
}

